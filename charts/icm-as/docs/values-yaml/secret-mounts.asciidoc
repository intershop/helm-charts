= Documentation about the `values.yaml` attributes belonging to section `secretMounts`
// GitHub issue: https://github.com/github/markup/issues/1095

:icons: font

ifdef::backend-html5[]
++++
<style>
.mand {
  color: #e00000;
}
.opt {
  color: #b0adac;
}
.cond {
  color: #FFDC00;
}
.tag-audience {
  font-style: italic;
}
.tag-audience::before {
  content: "@Target Audience: ";
}
.tag-since {
  font-style: italic;
}
.tag-since::before {
  content: "@Since: ";
}
.tag-deprecated {
  font-style: italic;
}
.tag-deprecated::before {
  content: "@Deprecated: ";
}
.placeholder {
  font-style: italic;
}
.placeholder::before {
  content: "<";
}
.placeholder::after {
  content: ">";
}
</style>
++++
endif::[]

:mandatory: icon:check[role="mand"]
:optional: icon:times[role="opt"]
:conditional: icon:question[role="cond"]


[.tag-since]#2.9.0#

=== Description

Allows the content of Kubernetes secrets to be mounted as files or made available as environment variables to the `icm-as-server` container.
The `secretMounts` section is a list of objects containing the following attributes:

[cols="1,3,1,1,1",options="header"]
|===
|Attribute |Description |Type |Mandatory |Default Value
|secretName|the name of the secret|string|{mandatory}|-
|type|the type of the secret|enum {`secret`, `certificate`}|{optional}|`secret`
|key|the data field inside the secret|string|{conditional} optional if `type=certificate`|`tls.crt` if `type=certificate`
|targetFile|path relative to `/secrets` if `type=secret` resp. `/certificates` if `type=certificate`|path|{optional}|-
|targetEnv|name of the environment variable to get made available|string|{optional}|-
|===

[CAUTION]
====
If neither `targetFile` nor `targetEnv` is set, the `secretMounts`-entry will have no effect at all.
====

[NOTE]
====
`*.crt`-files mounted into `/certificates` are imported into the truststore of the `icm-as-appserver`-container's JVM. So they are available to validate SSL/TLS connections to other servers that use such a certificate.
====

=== Example

[source,yaml]
----
secretMounts:
  - secretName: my-secret <1>
    type: secret
    targetFile: my-secret.txt
  - secretName: my-certificate <2>
    type: certificate
    key: tls.crt
    targetFile: my-certificate-file.crt
  - secretName: my-certificate <3>
    type: certificate
    key: tls.key
    targetFile: my-certificate-file.key
  - secretName: my-secret2 <4>
    type: secret
    targetEnv: MY_SECRET2
    targetFile: my-secret2.txt
----

The configuration above mounts the 3 secrets `my-secret`, `my-certificate` and `my-secret2`:

<1> `my-secret` is mounted as file `/secrets/my-secret.txt`
<2> the certificate part of `my-certificate` is mounted as file `/certificates/my-certificate-file.crt`
<3> the private key part of `my-certificate` is mounted as file `/certificates/my-certificate-file.key`
<4> `my-secret2` is made available as environment variable `MY_SECRET2` and mounted as file `/secrets/my-secret2.txt`

Minimal variant of the above example (omitting optional attributes):

[source,yaml]
----
secretMounts:
  - secretName: my-secret
    targetFile: my-secret.txt
  - secretName: my-certificate
    type: certificate
    targetFile: my-certificate-file.crt
  - secretName: my-certificate
    type: certificate
    key: tls.key
    targetFile: my-certificate-file.key
  - secretName: my-secret2
    targetEnv: MY_SECRET2
    targetFile: my-secret2.txt
----

[NOTE]
====
See https://support.intershop.com/kb/index.php/Display/X31381[Guide - Secret Store Process] for details on how to make secrets and certificates from an Azure KeyVault available in K8s secrets.
====
