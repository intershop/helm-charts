apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ template "icm-as.fullname" . }}-jgroups-config-xml
  labels:
    app: {{ template "icm-as.fullname" . }}-jgroups-config-xml
    chart: "{{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }}"
data:
  jgroups-config.xml:  |-
    <!--
      Default stack using IP multicasting. It is similar to the "udp"
      stack in stacks.xml, but doesn't use streaming state transfer and flushing
      author: Bela Ban

      ISH-addition: use different discovery types
    -->
    <config xmlns="urn:org:jgroups"
            xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
            xsi:schemaLocation="urn:org:jgroups http://www.jgroups.org/schema/jgroups.xsd"
            version="5.3.0.Final">
        <UDP
            bind_port="7800"
            ip_mcast="false"
            tos="8"
            ucast_recv_buf_size="20000000"
            ucast_send_buf_size="640000"
            mcast_recv_buf_size="25000000"
            mcast_send_buf_size="640000"
            bundler.max_size="64000"

            ip_ttl="${jgroups.udp.ip_ttl:2}"

            thread_naming_pattern="cl"
            thread_pool.enabled="true"
            thread_pool.min_threads="4"
            thread_pool.max_threads="64"
            thread_pool.keep_alive_time="10000"
        />

{{- if eq (include "icm-as.jgroups.discovery" .) "kube_ping" }}
        <!-- discover nodes using KUBE_PING -->
        <org.jgroups.protocols.kubernetes.KUBE_PING
          namespace="{{.Release.Namespace}}"
          labels="jgroupscluster={{- .Values.jgroups.clusterLabel | default .Release.Name -}}"
          port_range="{{- .Values.jgroups.portRange | default 5 -}}"
{{- else if eq (include "icm-as.jgroups.discovery" .) "file_ping" }}
        <!-- discover nodes by shared FS -->
        <FILE_PING
          location="/intershop/jgroups-share"
          remove_old_coords_on_view_change="true"
          remove_all_data_on_view_change="true"
          write_data_on_find="true"
{{- else if eq (include "icm-as.jgroups.discovery" .) "azure_ping" }}
        <!-- discover nodes using azure protocol -->
        <azure.AZURE_PING
          storage_account_name="${jgroups.azure_ping.storage_account_name}"
          storage_access_key="${jgroups.azure_ping.storage_access_key}"
          container="${jgroups.azure_ping.container:ping}"
{{- else if eq (include "icm-as.jgroups.discovery" .) "dns_ping" }}
        <!-- discover nodes using azure protocol -->
        <dns.DNS_PING 
          dns_query="{{ .Values.jgroups.dnsQuery }}"
{{- end }}
          {{- if .Values.jgroups -}}
            {{- if .Values.jgroups.discoveryExtraAttributes }}
          {{ .Values.jgroups.discoveryExtraAttributes }}
            {{- end -}}
          {{- end -}}
        />

        <MERGE3 max_interval="30000"
                min_interval="10000"/>
        <FD_SOCK/>
        <FD_ALL2 timeout="12000" interval="3000"/>
        <VERIFY_SUSPECT timeout="1500"  />

        <pbcast.NAKACK2 xmit_interval="500"
                        xmit_table_num_rows="100"
                        xmit_table_msgs_per_row="2000"
                        xmit_table_max_compaction_time="30000"
                        use_mcast_xmit="false"
                        discard_delivered_msgs="false"/>
        <UNICAST3 xmit_interval="500"
                  xmit_table_num_rows="100"
                  xmit_table_msgs_per_row="2000"
                  xmit_table_max_compaction_time="60000"
                  conn_expiry_timeout="0"/>
        <pbcast.STABLE desired_avg_gossip="50000"
                      max_bytes="400000"/>
        <pbcast.GMS print_local_addr="true"
                    join_timeout="1000"
                    max_join_attempts="5"/>
        <UFC max_credits="2000000"
              min_threshold="0.2"/>
        <FRAG2 frag_size="60000"  />
        <RSVP resend_interval="2000" timeout="10000"/>
        <pbcast.STATE/>
    </config>