# Default values for icm-as.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

replicaCount: 1

# define where the application shall run on
nodeSelector: {}
#  agentpool: <your agentpool>

# define custom annotations for deployment and pods:
deploymentAnnotations: {}
#  myAnnotation: true
podAnnotations: {}
#  myAnnotation: true

# define podbinding if required
podBinding:
  enabled: false
  binding: <name-of-the-binding>

# define custom labels for deployment and pods:
deploymentLabels: {}
#  tags.datadoghq.com/env: hell
#  tags.datadoghq.com/service: icm-as
#  tags.datadoghq.com/version: 11.0.0
podLabels: {}
#  tags.datadoghq.com/env: hell
#  tags.datadoghq.com/service: icm-as
#  tags.datadoghq.com/version: 11.0.0

image:
  pullPolicy: IfNotPresent
  # 'appServer' container provides the application / service endpoint
  repository: "intershophub/icm-as:11.0.8"

## Optionally specify an array of imagePullSecrets. Secrets must be manually created in the namespace.
## https://kubernetes.io/docs/concepts/containers/images/#specifying-imagepullsecrets-on-a-pod
## Intershop: These secrets also last for customization images
imagePullSecrets:
- "dockerhub"

# list of customization images each following the structure:
#  <name>:
#    repository: <repo incl. tag>
#    secret: <optional pull secret>
#    pullPolicy: <pullPolicy, default=IfNotPresent>
customizations: {}
# e.g.:
#  responsive:
#    repository: responsive-repo:0.8.15
#    pullPolicy: IfNotPresent
#  my-project:
#    repository: my-project-repo:0.0.7
#  custom-adapter:
#    repository: custom-adapter-repo:47.11.0
#    pullPolicy: IfNotPresent


## Optionally specify a custom command that controls which entrypoint is called inside the container during startup
## (see Deployment/spec.template.spec.container.command)
# customCommand: ["/bin/sh", "-c", "/custom-dir/custom-script.sh"]

## Control options regarding the java-vm running the ICM-AS
jvm:
  debug:
    # enable/disable to java-vm-debugging
    enabled: false
  # define options / parameters to be used to start the jvm
  options: "-XX:MaxRAMPercentage=80 -XX:InitialRAMPercentage=80"
  # define additional options / parameters to be used to start the jvm (will be appended to options)
  additionalOptions:

nameOverride: ""

fullnameOverride: ""

# provide custom cluster config from "icm-as.fullname"-system-conf-cluster configmap
provideCustomConfig: {}
  # logback-main:
  #   mountPath: /intershop/system-conf/cluster/
  #   fileName: logback-main.xml
  # urlrewriterules:
  #   mountPath: /intershop/system-conf/cluster/
  #   fileName: urlrewriterules.xml

serviceAccount:
  # Specifies whether a service account should be created
  create: false
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name:

podSecurityContext:
  # intershop user - defined by icm-base-docker image
  runAsUser: 150
  runAsGroup: 150

testConnection:
  protocol: http
  port: 7743
  url: /servlet/ConfigurationServlet
  serviceSuffix:

resources:
  limits:
    cpu: 1000m
    memory: 3Gi
  requests:
    cpu: 1000m
    memory: 3Gi

environment:
  INTERSHOP_DATABASETYPE: "mssql"
  INTERSHOP_JDBC_URL: "jdbc:sqlserver://<ipaddress or hostname>:1433;databaseName=intershop"
  # INTERSHOP_DATABASETYPE: "oracle"
  # INTERSHOP_JDBC_URL: "jdbc:oracle:thin:@<ipaddress or hostname>:1521:intershop"
  INTERSHOP_JDBC_USER: "intershop"
  INTERSHOP_JDBC_PASSWORD: "intershop"
  CARTRIDGE_LIST: "ft_icm_as"

  # Staging
  # STAGING_SYSTEM_TYPE: editing
  # INTERSHOP_JDBC_USER_LIVE: "intershop_live"
  # INTERSHOP_WEBSERVERURL: http://icm-replication-icm-web-edit-wa:8080
  # INTERSHOP_WEBSERVERSECUREURL: https://icm-replication-icm-web-edit-wa:8443
  # INTERSHOP_WEBSERVERURL_LIVE: http://icm-replication-icm-web-live-wa:8080

# ICM license Configuration
license:
# type: configMap | csi
  type: configMap
  configMap:
    content: |-
      <your license>
  csi:
    volumeAttributes:
      secretProviderClass: "azure-license"
    nodePublishSecretRef:
      name: secrets-store-creds

persistence:
  sites:
    size: 1Gi
    # type cluster | nfs | azurefiles | existingClaim | local
    type: local
    existingClaim: <claim name>
    cluster:
      storageClass:
        create: false
        # if create == false an exiting class could be set
        # if empty value is set the default storage class is used
        existingClass: ""
        # skuName: Standard_LRS
        # additionalMountOptions:
        # - dir_mode=0777
        # - file_mode=0777
        # - mfsymlinks
        # - cache=strict
        # - actimeo=30
    azurefiles:
      shareName: icm-as-share
      secretName: icm-as-share-secret
    nfs:
      server: <ipaddress or hostname>
      path: <server folder>
    local:
      path: <local folder>
  jgroups:
    size: 1Gi
    # type emptyDir | existingClaim | cluster | local
    type: emptyDir
    existingClaim: <claim name>
    cluster:
      storageClass: azurefile
  customdata:
    enabled: false
    existingClaim: icm-as-cluster-customData-pvc
    mountPoint: /data

# Probes, all values are optional, below are the defaults
probes:
  startup: {}
#    failureThreshold: 6
#    initialDelaySeconds: 60
#    periodSeconds: 10
  liveness: {}
#    failureThreshold: 3
#    initialDelaySeconds: 0
#    periodSeconds: 10
  readiness: {}
#    failureThreshold: 3
#    initialDelaySeconds: 0
#    periodSeconds: 5
