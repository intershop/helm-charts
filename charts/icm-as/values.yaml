# Default values for icm-as.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

# define the number of replicas being deployed (int, > 0, default=1)
replicaCount: 1

# define the update strategy (possible values: Recreate, RollingUpdate; default=RollingUpdate)
updateStrategy: RollingUpdate

# define where the application shall run on
nodeSelector: {}
#  agentpool: <your agentpool>

# define custom annotations for deployment and pods:
deploymentAnnotations: {}
#  myAnnotation: true
podAnnotations: {}
#  myAnnotation: true

# define pod binding if required
# @Deprecated since 2.9.2 (https://github.com/Azure/aad-pod-identity/issues/1349) replaced by workload identity (https://azure.github.io/azure-workload-identity/docs/)
podBinding:
  enabled: false
  binding: <name-of-the-binding>

# define custom labels for deployment and pods:
deploymentLabels: {}
podLabels: {}

image:
  pullPolicy: IfNotPresent
  # 'appServer' container provides the application / service endpoint
  repository: "intershophub/icm-as"
  # tag: "11.1.3"

## define a secret for a container registry
dockerSecret:
  enabled: false
  name: "dockerhub"
  username: "<your registry username>"
  password: "<your registry password>"

## Optionally specify an array of imagePullSecrets. Secrets must be manually created in the namespace
## or by the above dockerSecrets section.
## https://kubernetes.io/docs/concepts/containers/images/#specifying-imagepullsecrets-on-a-pod
## Intershop: These secrets also last for customization images
imagePullSecrets:
  - "dockerhub"

# list of customization images each following the structure:
#  <name>:
#    repository: <repo incl. tag>
#    secret: <optional pull secret>
#    pullPolicy: <pullPolicy, default=IfNotPresent>
customizations: {}
# e.g.:
#  responsive:
#    repository: responsive-repo:0.8.15
#    pullPolicy: IfNotPresent
#  my-project:
#    repository: my-project-repo:0.0.7
#  custom-adapter:
#    repository: custom-adapter-repo:47.11.0
#    pullPolicy: IfNotPresent

## Control options regarding the java-vm running the ICM-AS
jvm:
  debug:
    # enable/disable to java-vm-debugging
    enabled: false
  # define options / parameters to be used to start the jvm
  options: "-XX:MaxRAMPercentage=70 -XX:InitialRAMPercentage=70"
  # define additional options / parameters to be used to start the jvm (will be appended to options)
  additionalOptions:

# configuration related to New Relic
newrelic:
  # enable or disable the New Relic Java agent to monitor the icm-as JVM
  # https://docs.newrelic.com/docs/kubernetes-pixie/kubernetes-integration/advanced-configuration/link-apm-applications-kubernetes/
  enabled: false
  # provide license key as plain text
  # "license_key" deprecated since ICM-AS Helm Charts 1.8.0, will be removed in a future version.
  # Use licenseKeySecretKeyRef instead.
  license_key: "secret"
  # instead use secret key reference (recommended) - takes precedence over license_key
  # licenseKeySecretKeyRef:
  #  name: <your-company-prd-secrets>
  #  key: <licenseKey>
  metrics:
    # fine grade possibility to disable metrics for cost reduction
    enabled: true
  apm:
    # fine grade possibility to disable apm for cost reduction
    enabled: true

# configuration for metrics about infrastructure components
infrastructureMonitoring:
  # enable or disable the whole feature
  enabled: true
  # the metrics agent requires a docker image to run
  image:
    # pull policy
    pullPolicy: IfNotPresent
    # repository (incl. tag)
    repository: "intershophub/infrastructure-probing:3.0.0"
  # section for database latency metrics
  databaseLatency:
    # enabled/disabled (default=false)
    enabled: true
    # how often to gather a sample for the metrics (pattern compatible to java.time.Duration#parse, default=60S)
    interval: 60S
  # section for sites storage latency metrics
  sitesLatency:
    # enabled/disabled (default=false)
    enabled: true
    # how often to gather a sample for the metrics (pattern compatible to java.time.Duration#parse, default=60S)
    interval: 60S
    # which path has to be used (mandatory)
    path: /intershop/sites/root
  # section for sites storage latency metrics
  sitesReadThroughput:
    # enabled/disabled (default=false)
    enabled: false
    # how often to gather a sample for the metrics (pattern compatible to java.time.Duration#parse, default=60S)
    interval: 60S
    # which path has to be used (mandatory)
    path: /intershop/sites/.readThroughputProbing
    # size of the file to be read (format compatible to https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/quantity/, default=5 Mi)
    fileSize: 5 Mi
  # section for sites storage latency metrics
  sitesWriteThroughput:
    # enabled/disabled (default=false)
    enabled: false
    # how often to gather a sample for the metrics (pattern compatible to java.time.Duration#parse, default=60S)
    interval: 60S
    # which path has to be used (mandatory)
    path: /intershop/sites/.writeThroughputProbing
    # size of the file to be written (format compatible to https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/quantity/, default=5 Mi)
    fileSize: 5 Mi

nameOverride: ""

fullnameOverride: ""

# Set a custom server name. Defaults to 'appserver'
# serverName: <customServerName>

# operational context (~= environment) this icm is running in
operationalContext:
  #   id of the customer e.g. xxxxx
  customerId: "n_a"
  # type of the environment (one of {int,uat,prd}, default=prd)
  environmentType: prd
  # name of the environment (environment-type + some sort of id, e.g. int-01, default=<environmentType>)
  environmentName: prd

serviceAccount:
  # Specifies whether a service account should be created and used
  create: false
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use. (default .Release.Name + "-default")
  name:

podSecurityContext:
  # intershop user - defined by icm-base-docker image
  runAsUser: 150
  runAsGroup: 150
  fsGroup: 150
  runAsNonRoot: true
  fsGroupChangePolicy: "OnRootMismatch"

hostAliases: []
# - ip: "127.0.0.1"
#   hostnames:
#   - "foo.local"

dnsConfig: {}
#  nameservers:
#  - 192.0.2.1 # this is an example
#  searches:
#  - ns1.svc.cluster-domain.example
#  - my.dns.search.suffix
#  options:
#  - name: ndots
#    value: "2"
#  - name: edns0

testConnection:
  protocol: http
  port: 7743
  url: /servlet/ConfigurationServlet
  serviceSuffix:

resources:
  limits:
    cpu: 1000m
    memory: 3Gi
  requests:
    cpu: 1000m
    memory: 3Gi

# configure an external database for ICM
# in case value "mssql.enabled" is true - this section will be ignored
database:
  # type: "mssql" or "oracle"
  type: "mssql"
  # or for oracle "jdbc:oracle:thin:@<ipaddress or hostname>:1521:intershop"
  jdbcURL: "jdbc:sqlserver://<ipaddress or hostname>:1433;databaseName=intershop"
  jdbcUser: "intershop"
  # provide pwd as plain text
  jdbcPassword: "intershop"
  # instead use secret key reference (recommended) - takes precedence over jdbcPassword
  # jdbcPasswordSecretKeyRef:
  #  name: <your-company-prd-secrets>
  #  key: <jdbcpasswd>

# environment variables to be propagated to the icm-as-container
environment:
  CARTRIDGE_LIST: "ft_icm_as"

# environment variable secrets to be propagated to the icm-as-container
# @Deprecated since 2.9.0, replaced by secretMounts with targetEnv provided
secrets:
  []
  # - env: <YOUR_MAIL_PASSWORD> # environment variable key
  #  name: <emailSecrets> # name of the secret, containing the referenced key
  #  key: <smtpPassword> # key within the secret

# Configure the secret mounts for the ICM application server.
# List 0..n secret mounts consisting of the following properties: secretName[, type][, key,][, targetFile][, targetEnv]
# If more than one field has to be mounted from a single secret add multiple entries with the same secretName (different targetFile|targetEnv).
# If targetFile is provided the secret's value will be mounted as a file
# If targetEnv is provided the secret's value set a an environment variable
# If neither targetFile nor targetEnv is provided the secret's value not be available
# Secrets of type "certificate" are imported into the JVM's truststore
# See https://support.intershop.com/kb/index.php/Display/X31381 for details on how to make secrets and certificates from an Azure KeyVault available in K8s secrets
secretMounts: []
#  - secretName: <secretName> # name of the secret
#    type:
#      secret # target type inside the ICM, supported values incl. mount path
#      # secret (default) -> /secrets
#      # certificate -> /certificates
#    key: data # data field inside the secret, optional for type=certificate with default=tls.crt
#    targetFile: <releativeFileName> # path relative to the parent path defined by the type, optional, if ommited no file will be mounted
#    targetEnv: <ENV_VARIABLE_NAME> # name of the environment variable to be set, optional, if ommited no variable will be set

persistence:
  sites:
    size: 1Gi
    # type cluster | nfs | azurefiles | static | existingClaim | local
    type: local
    existingClaim: <claim name>
    static:
      # name of persistent volume to be used
      name: <volume name>
      # storage class of the persistent volume to be used
      storageClass: <storage class>
    cluster:
      storageClass:
        create: false
        # if create == false an exiting class could be set
        # if empty value is set the default storage class is used
        existingClass: ""
        # skuName: Standard_LRS
        # mountOptions:
        # - uid=150
        # - gid=150
        # - dir_mode=0777
        # - file_mode=0777
        # - mfsymlinks
        # - cache=strict
        # - actimeo=30
    azurefiles:
      shareName: icm-as-share
      secretName: icm-as-share-secret
    nfs:
      server: <ipaddress or hostname>
      path: <server folder>
    local:
      path: <local sites folder>
  encryption:
    size: 1Gi
    # type cluster | nfs | azurefiles | static | existingClaim | local
    type: local
    existingClaim: <claim name>
    static:
      # name of persistent volume to be used
      name: <volume name>
      # storage class of the persistent volume to be used
      storageClass: <storage class>
    cluster:
      storageClass:
        create: false
        # if create == false an exiting class could be set
        # if empty value is set the default storage class is used
        existingClass: ""
        # skuName: Standard_LRS
        # mountOptions:
        # - uid=150
        # - gid=150
        # - dir_mode=0777
        # - file_mode=0777
        # - mfsymlinks
        # - cache=strict
        # - actimeo=30
    azurefiles:
      shareName: icm-as-share
      secretName: icm-as-share-secret
    nfs:
      server: <ipaddress or hostname>
      path: <server folder>
    local:
      path: <local encryption folder>
  jgroups:
    size: 1Gi
    # type emptyDir | existingClaim | cluster | local | azurefiles
    type: emptyDir
    existingClaim: <claim name>
    cluster:
      storageClass:
        create: false
        # if create == false an exiting class could be set
        # if empty value is set the default storage class is used
        existingClass: ""
    azurefiles:
      shareName: icm-as-jgroups
      secretName: icm-as-jgroups-secret
  customdata:
    enabled: false
    existingClaim: icm-as-cluster-customData-pvc
    mountPoint: /data

# Probes, all values are optional, below are the defaults
probes:
  startup: {}
  #    failureThreshold: 6
  #    initialDelaySeconds: 60
  #    periodSeconds: 10
  liveness: {}
  #    failureThreshold: 3
  #    initialDelaySeconds: 0
  #    periodSeconds: 10
  readiness: {}
#    failureThreshold: 3
#    initialDelaySeconds: 0
#    periodSeconds: 5

# Duration in seconds pod needs to terminate gracefully, value is optional, below is the default
# terminationGracePeriodSeconds: 30

# Enable Microsoft SQL Server for development and testing purposes.
# ICM will use jdbc:sqlserver://<release>-mssql:1433;database=<mssql.name>;
# see values of persistence.mssql-data and persistence.mssql-backup
mssql:
  enabled: false
  # recreate database on restart
  recreation: false
  resources:
    limits:
      cpu: 1000m
      memory: 3Gi
    requests:
      cpu: 1000m
      memory: 3Gi
  image:
    repository: "intershophub/mssql-intershop:2022-latest"
  # needs to be explicitly switched at deployment to "Y"
  acceptEula: "N"
  saPassword: "1nstershop5A"
  databaseName: "icmdb"
  user: "icmdbuser"
  # provide pwd as plain text
  password: "icmdbpassword"
  # instead use secret key reference (recommended) - takes precedence over password
  # passwordSecretKeyRef:
  #  name: <your-company-prd-secrets>
  #  key: <passwd>
  persistence:
    data:
      size: 5Gi
      # type cluster | nfs | azurefiles | existingClaim | local
      type: local
      existingClaim: <claim name>
      cluster:
        storageClass:
          create: false
          # if create == false an exiting class could be set
          # if empty value is set the default storage class is used
          existingClass: ""
          # skuName: Standard_LRS
          # additionalMountOptions:
          # - uid=150
          # - gid=150
          # - dir_mode=0777
          # - file_mode=0777
          # - mfsymlinks
          # - cache=strict
          # - actimeo=30
      azurefiles:
        shareName: <icm-as-mssql-data-share>
        secretName: <icm-as-mssql-secret>
      local:
        path: <local mssql data folder>
    backup:
      size: 5Gi
      # type cluster | nfs | azurefiles | existingClaim | local
      type: local
      existingClaim: <claim name>
      cluster:
        storageClass:
          create: false
          # if create == false an exiting class could be set
          # if empty value is set the default storage class is used
          existingClass: ""
          # skuName: Standard_LRS
          # additionalMountOptions:
          # - uid=150
          # - gid=150
          # - dir_mode=0777
          # - file_mode=0777
          # - mfsymlinks
          # - cache=strict
          # - actimeo=30
      azurefiles:
        shareName: <icm-as-mssql-backup-share>
        secretName: <icm-as-mssql-secret>
      local:
        path: <local mssql backup folder>

# allows it to copy the sites dir which is needed for our test execution
copySitesDir:
  enabled: false
  # fromDir: sites folder
  # resultDir: result folder where a sites.txt is generated to
  # chmodUser: user
  # chmodGroup: group

# configure an ingress here only if you don't use icm-web !
ingress:
  enabled: false
  className: null
  annotations:
    {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  # Paths are treated as list of prefixes. Any URL matching one of the prefixes will
  # be forwarded to ICM.
  hosts:
    - host: <dns-name-of-service>
      paths:
        - path: /
          pathType: Prefix
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

webLayer:
  enabled: false
  redis:
    enabled: false
    # Redisson client yaml config
    config: null

# @Deprecated since 2.9.0, replaced by secretMounts
sslCertificateRetrieval:
  enabled: false
  supportV1: false
  # secretName: <explicit-ssl-secret-name>
  keyvault:
    tenantId: <tenant-ID-of-the-KeyVault>
    subscriptionId: <subscription-ID-of-the-KeyVault>
    resourceGroup: <resource-group-of-the-KeyVault>
    keyvaultName: <name-of-the-KeyVault>
    certificateName: <name-of-the-certificate>

# Configure configuration of the job-server.
# The job-server template inherits most properties from the configuration of the application-server.
# In order to override these properties add them in the job section, e.g. add a 'resources' section to
# configure different cpu or memory limits.
job:
  # if enabled=true the job controller must be deployed at cluster separately. see icm-job chart.
  enabled: false

  # If true, job-server-support will be available but no jobs will be created
  # suspend: false

  # Sets the polling interval of the job-scheduler in seconds, defaults to 30s
  # pollInterval: value_in_seconds

  # Sets the limit of failed jobs in the history. If the limit gets reached
  # the eldest jobs will be deleted. Defaults to unlimited
  failedJobsHistoryLimit: 1

  # Sets the limit of successful jobs in the history. If the limit gets reached
  # the eldest jobs will be deleted. Defaults to unlimited
  successfulJobsHistoryLimit: 3

  # If true the schedule-time-computer will be called with server name 'jobserver' and group == 'JOB'
  nameSpecific: false

  # Custom job-server name. Defaults to 'jobserver'
  # serverName: <CustomJobServerName>

# Configuration for a replication/staging scenario
replication:
  # enables/disables the replication support: whether this icm-as is part of a replication system or not
  enabled: false

  # defines the type of this replication system (source | target)
  role: <source|target>

  # "targetSystemUrl" deprecated since ICM-AS Helm Charts 2.2.0, will be removed in a future version.
  # Configure the source and targets within replication instead.
  # if role=source the following properties are mandatory (otherwise they are ignored)
  # the external URL of the webServer/proxy/ingress e.g. https://icm-web-live-wa:443
  targetSystemUrl: <externalUrl>

  # "sourceDatabaseName" deprecated since ICM-AS Helm Charts 2.2.0, will be removed in a future version.
  # Configure the source and targets within replication instead.
  # the name of the (source) database to be used at the target-system to read data from e.g. intershop_edit
  sourceDatabaseName: <databaseName>

  # The following "source" and "targets" configuration blocks take precedence over
  # the deprecated "targetSystemUrl" / "sourceDatabaseName" configurations
  # Configuration for source system that participates in replication
#  source:
#    # the external URL of the webServer/proxy/ingress e.g. https://icm-web-edit-wa:443
#    webserverUrl: <sourceExternalUrl>
#    # either mutual exclusive databaseName or databaseLink have to be configured
#    databaseLink: <sourceDatabaseLink>
#    databaseUser: <sourceDatabaseUser>
#    databaseName: <sourceDatabaseName>

# Configuration for all target systems that participates in replication
#  targets:
#    # create multiple target systems - please avoid characters like '.', '-' or '_' in the chosen name/key
#    live1:
#      # the external URL of the webServer/proxy/ingress e.g. https://icm-web-live-wa:443
#      webserverUrl: <targetExternalUrl>
#      # this database user will be granted access to the database schema of the source replication system
#      databaseUser: <targetDatabaseUser>
#    live2:
#      # the external URL of the webServer/proxy/ingress e.g. https://icm-web-live-wa:443
#      webserverUrl: <targetExternalUrl>
#      # this database user will be granted access to the database schema of the source replication system
#      databaseUser: <targetDatabaseUser>

# Configuration of messaging via jgroups
jgroups:
  # the discovery protocol to use
  # supported values are file_ping or kube_ping. Defaults to file_ping, but kube_ping | azure_ping is recommended
  # file_ping (default) requires a mounted file system
  # kube_ping (recommended) please set serviceAccount.create to create service account if not exists to allow icm to talk with k8s api server
  # azure_ping (playground) mounts azure storage directly
  # dns_ping (playground) declared dns query
  discovery: file_ping

  # location allows to set a different (optional) directory for file_ping discovery protocol
  # it needs to point into an existing e.g. mounted file system storage that is shared to other application servers
  # e.g. '/intershop/sites/root/jgroups'
  location:

  # extra attributes to be added at the ping-section in xml,
  # e.g. 'readTimeout="1000" operationAttempts="5"'
  # discoveryExtraAttributes: <extra-attributes>

  # the DNS-query. Used with discovery type dns_ping
  dnsQuery: <dnsQuery>

  # label for multiple clusters in a release (default: .Release.Name)
  clusterLabel:
  # adaption of ports in case a different range is needed
  portRange:
# tolerations for icm-as pods
tolerations: null
