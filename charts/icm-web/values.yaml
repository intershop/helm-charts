# Default values for icm-webadapter.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

replicaCount: 1

# defined where the application shall run on
nodeSelector: {}
#  agentpool: <your agentpool>

webadapter:
  image:
    repository: intershophub/icm-webadapter:2.4.6
    pullPolicy: IfNotPresent
    command: |
      /intershop/bin/intershop.sh
  # disable HTTP/2 protocol support if required
  disableHTTP2: false
  customHttpdConfig: false
  # provides custom certificates for webadapter
  customSSLCertificates: false
  overrideSSL: false
  replicaCount: 1
  sslCertificateRetrieval:
    enabled: false
    # secretName: <explicit-ssl-secret-name>
    keyvault:
      tenantId: <tenant-ID-of-the-KeyVault>
      subscriptionId: <subscription-ID-of-the-KeyVault>
      resourceGroup: <resource-group-of-the-KeyVault>
      keyvaultName: <name-of-the-KeyVault>
      certificateName: <name-of-the-certificate>

  # define custom annotations for deployment and pods:
  deploymentAnnotations: {}
  #  myAnnotation: true
  podAnnotations: {}
  #  myAnnotation: true

  # define podbinding if required
  podBinding:
    enabled: false
    binding: <name-of-the-binding>

  # define custom labels for deployment and pods:
  deploymentLabels: {}
  #  tags.datadoghq.com/env: hell
  #  tags.datadoghq.com/service: icm-web-waa
  #  tags.datadoghq.com/version: 11.0.0
  podLabels: {}
  #  tags.datadoghq.com/env: hell
  #  tags.datadoghq.com/service: icm-web-waa
  #  tags.datadoghq.com/version: 11.0.0

agent:
  # in some REST-based environment the webadapteragent isn't mandatory
  enabled: true
  image:
    repository: intershophub/icm-webadapteragent:4.0.0
    pullPolicy: IfNotPresent
    command: |
      /intershop/bin/start-waa.sh
  replicaCount: 1

  # define custom annotations for deployment and pods:
  deploymentAnnotations: {}
  #  myAnnotation: true
  podAnnotations: {}
  #  myAnnotation: true

  # define podBinding if required
  podBinding:
    enabled: false
    binding: <name-of-the-binding>

  # define custom labels for deployment and pods:
  deploymentLabels: {}
  #  tags.datadoghq.com/env: hell
  #  tags.datadoghq.com/service: icm-web
  #  tags.datadoghq.com/version: 11.0.0
  podLabels: {}
  #  tags.datadoghq.com/env: hell
  #  tags.datadoghq.com/service: icm-web
  #  tags.datadoghq.com/version: 11.0.0

## Optionally specify an array of imagePullSecrets. Secrets must be manually created in the namespace.
## https://kubernetes.io/docs/concepts/containers/images/#specifying-imagepullsecrets-on-a-pod
imagePullSecrets:
- "dockerhub"

persistence:
  pagecache:
    size: 1Gi
    # type cluster | nfs | azurefiles | existingClaim | local | emptyDir
    type: emptyDir
    existingClaim: claimName
    cluster:
      storageClass:
        create: true
        # if create == false an exiting class could be set
        # if empty value is set the default storage class is used
        # existingClass: ""
        skuName: Standard_LRS
        mountOptions:
        - uid=150
        - gid=150
        - dir_mode=0777
        - file_mode=0777
        - mfsymlinks
        - cache=strict
        - actimeo=30
    azurefiles:
      shareName: icm-as-share
      secretName: icm-as-share-secret
    nfs:
      server: <ipaddress or hostname>
      path: <server folder>
    local:
      path: <local folder>
  customdata:
    enabled: false
    existingClaim: icm-as-cluster-customData-pvc
    mountPoint: /data

resources:
  webadapter:
    limits:
      cpu: 100m
      memory: 400Mi
    requests:
      cpu: 100m
      memory: 400Mi
  agent:
    limits:
      cpu: 100m
      memory: 200Mi
    requests:
      cpu: 100m
      memory: 200Mi

ingress:
  enabled: false
  className: nginx
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  # Paths are treated as list of prefixes. Any URL matching one of the prefixes will
  # be forwared to ICM.
  hosts:
    - host: <dns-name-of-service>
      paths:
        - path: /
          pathType: Prefix
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

nameOverride: ""
fullnameOverride: ""

service:
  type: ClusterIP
  # these ports shall be equal to the pods ports because of forwarding/redirect issues
  httpPort: 8080
  httpsPort: 8443

podSecurityContext:
  # intershop user - defined by icm-base-docker image
  runAsUser: 150
  runAsGroup: 150

appServerConnection:
  serviceName: icm-as
  port: 7744

environment: {}
