apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "icm-web.fullname" . }}-wa
  {{- if .Values.webadapter.deploymentAnnotations }}
  annotations:
    {{- toYaml .Values.webadapter.deploymentAnnotations | trim | nindent 4 }}
  {{- end }}
  labels:
    app: {{ include "icm-web.fullname" . }}-wa
    chart: "{{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }}"
    environment-name: "{{ include "icm-web.environmentName" . }}"
    environment-type: "{{ include "icm-web.environmentType" . }}"
    operational-context: "{{ include "icm-web.operationalContextName" . }}"
    {{- if .Values.webadapter.deploymentLabels }}
      {{- toYaml .Values.webadapter.deploymentLabels | trim | nindent 4 }}
    {{- end }}
spec:
  replicas: {{ .Values.webadapter.replicaCount | default 0 }}
  {{- if (ne (int .Values.webadapter.replicaCount) 0) }}
  strategy:
    type: {{ .Values.webadapter.updateStrategy | default "RollingUpdate" }}
    rollingUpdate:
      maxUnavailable: 0
      maxSurge: 1
  {{- end }}
  selector:
    matchLabels:
      app: icm-wa
      release: {{ include "icm-web.fullname" . }}
  template:
    metadata:
    {{- if .Values.webadapter.podAnnotations }}
      annotations:
      {{- toYaml .Values.webadapter.podAnnotations | trim | nindent 8 }}
    {{- end }}
      labels:
        app: icm-wa
        release: {{ include "icm-web.fullname" . }}
        {{- if .Values.webadapter.podLabels }}
          {{- toYaml .Values.webadapter.podLabels | trim | nindent 8 }}
        {{- end }}
        {{- if .Values.webadapter.podBinding.enabled }}
        aadpodidbinding: {{ .Values.webadapter.podBinding.binding }}
        {{- end }}
    spec:
      {{- if .Values.nodeSelector}}
      nodeSelector:
        {{- toYaml .Values.nodeSelector | trim | nindent 8 }}
      {{- end }}
      {{- if and (not .Values.nodeSelector) (.Values.webadapter.schedulePodsPreferredEvenlyAcrossNodes) }}
      affinity:
        podAntiAffinity:
          # Choose schedulability over pod anti-affinity preference satisfaction
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              # Spread WA pods evenly over nodes
              # See ticket #95582 regarding the simultaneous kill at nearly the exact same moment,
              # likely same node was affected by memory pressure
              topologyKey: "kubernetes.io/hostname"
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - {{ include "icm-web.fullname" . }}-wa
      {{- end }}
      {{- if .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- range .Values.imagePullSecrets }}
        - name: {{ . | quote }}
        {{- end }}
      {{- end }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      volumes:
      {{- if .Values.webadapter.customHttpdConfig }}
      - name: httpd-config-volume
        configMap:
          name:  {{ template "icm-web.fullname" . }}-httpd-conf
      {{- end }}
      {{- if .Values.webadapter.customSSLCertificates }}
      - name: ssl-config-volume
        configMap:
          name:  {{ template "icm-web.fullname" . }}-ssl-certificates
      {{- end }}
      - name: pagecache-volume
        {{- if eq .Values.persistence.pagecache.type "existingClaim" }}
        persistentVolumeClaim:
          claimName: "{{ .Values.persistence.pagecache.existingClaim }}"
        {{- else if eq .Values.persistence.pagecache.type "azurefiles" }}
        csi:
          driver: file.csi.azure.com
          readOnly: false
          volumeAttributes:
            secretName: {{ .Values.persistence.pagecache.azurefiles.secretName }}
            shareName: {{ .Values.persistence.pagecache.azurefiles.shareName }}
            mountOptions: "uid={{ .Values.podSecurityContext.runAsUser }},gid={{ .Values.podSecurityContext.runAsGroup }}"
        {{- else if eq .Values.persistence.pagecache.type "local" }}
        persistentVolumeClaim:
          claimName: "{{ template "icm-web.fullname" . }}-local-pagecache-pvc"
        {{- else if eq .Values.persistence.pagecache.type "nfs" }}
        persistentVolumeClaim:
          claimName: "{{ template "icm-web.fullname" . }}-nfs-pagecache-pvc"
        {{- else if eq .Values.persistence.pagecache.type "emptyDir" }}
        emptyDir: {}
        {{- else if eq .Values.persistence.pagecache.type "cluster" }}
        persistentVolumeClaim:
          claimName: "{{ template "icm-web.fullname" . }}-cluster-pagecache-pvc"
        {{- end }}
      - name: logs-volume
        {{- if eq .Values.persistence.logs.type "existingClaim" }}
        persistentVolumeClaim:
          claimName: "{{ .Values.persistence.logs.existingClaim }}"
        {{- else if eq .Values.persistence.logs.type "azurefiles" }}
        csi:
          driver: file.csi.azure.com
          readOnly: false
          volumeAttributes:
            secretName: {{ .Values.persistence.logs.azurefiles.secretName }}
            shareName: {{ .Values.persistence.logs.azurefiles.shareName }}
            mountOptions: "uid={{ .Values.podSecurityContext.runAsUser }},gid={{ .Values.podSecurityContext.runAsGroup }}"
        {{- else if eq .Values.persistence.logs.type "local" }}
        persistentVolumeClaim:
          claimName: "{{ template "icm-web.fullname" . }}-local-logs-pvc"
        {{- else if eq .Values.persistence.logs.type "nfs" }}
        persistentVolumeClaim:
          claimName: "{{ template "icm-web.fullname" . }}-nfs-logs-pvc"
        {{- else if eq .Values.persistence.logs.type "emptyDir" }}
        emptyDir: {}
        {{- else if eq .Values.persistence.logs.type "cluster" }}
        persistentVolumeClaim:
          claimName: "{{ template "icm-web.fullname" . }}-cluster-logs-pvc"
        {{- end }}
        {{- if .Values.persistence.customdata.enabled }}
      - name: custom-data-volume
        persistentVolumeClaim:
          claimName: "{{ .Values.persistence.customdata.existingClaim }}"
        {{- end }}
        {{- if .Values.webadapter.sslCertificateRetrieval.enabled }}
      - name: secrets-store-inline
        csi:
          driver: secrets-store.csi.k8s.io
          readOnly: true
          volumeAttributes:
            secretProviderClass: {{ include "icm-web.fullname" . }}-wa-spc-cert
        {{- end }}
        {{- if (and .Values.agent.newrelic.enabled .Values.agent.enabled (eq .Values.persistence.pagecache.type "emptyDir")) }}
      - name: waa-newrelic-config-volume
        configMap:
          defaultMode: 420
          name: {{ template "icm-web.fullname" . }}-newrelic-yml
        {{- end }}
      containers:
        - name: "{{ .Chart.Name }}-wa"
          {{- if .Values.webadapter.image.tag }}
          image: "{{ .Values.webadapter.image.repository }}:{{ .Values.webadapter.image.tag }}"
          {{- else }}
          image: "{{ .Values.webadapter.image.repository }}"
          {{- end }}
          imagePullPolicy: {{ .Values.webadapter.image.pullPolicy }}
          env:
          - name: ICM_ICMSERVLETURLS
            value: "cs.url.0=http://{{ .Release.Name }}-{{ .Values.appServerConnection.serviceName }}:{{ .Values.appServerConnection.port }}/servlet/ConfigurationServlet"
          {{- if .Values.webadapter.disableHTTP2 }}
          - name: ICM_WEBSERVER_DISABLE_HTTP2
            value: "true"
          {{- end }}
          {{- if .Values.environment }}
            {{- range $key, $value := .Values.environment }}
          - name: {{ $key }}
            value: {{ $value | quote }}
            {{- end }}
          {{- end }}
          startupProbe:
            tcpSocket:
              port: {{ .Values.service.httpPort }}
            # Check every 5s up to a total timeout of 30s
            initialDelaySeconds: {{ .Values.webadapter.probes.startup.initialDelaySeconds | default 0 }}
            periodSeconds: {{ .Values.webadapter.probes.startup.periodSeconds | default 5 }}
            failureThreshold: {{ .Values.webadapter.probes.startup.failureThreshold | default 6 }}
            timeoutSeconds: {{ .Values.webadapter.probes.startup.timeoutSeconds | default 1 }}
          livenessProbe:
            tcpSocket:
              port: {{ .Values.service.httpPort }}
            # Check every 10s up to a total timeout of 30s
            initialDelaySeconds: {{ .Values.webadapter.probes.liveness.initialDelaySeconds | default 0 }}
            periodSeconds: {{ .Values.webadapter.probes.liveness.periodSeconds | default 10 }}
            failureThreshold: {{ .Values.webadapter.probes.liveness.failureThreshold | default 3 }}
            timeoutSeconds: {{ .Values.webadapter.probes.liveness.timeoutSeconds | default 1 }}
          readinessProbe:
            httpGet:
              # /INTERSHOP/wastatus response code is directly linked to configuration servlet availability/validity and
              # therefore ultimately linked to ICM-AS readiness
              path: /INTERSHOP/wastatus
              port: {{ .Values.service.httpPort }}
              httpHeaders:
                - name: X-HEALTHCHECK
                  value: INTERSHOPAGENT
            # Check every 10s up to a total timeout of 30s
            initialDelaySeconds: {{ .Values.webadapter.probes.readiness.initialDelaySeconds | default 0 }}
            periodSeconds: {{ .Values.webadapter.probes.readiness.periodSeconds | default 10 }}
            failureThreshold: {{ .Values.webadapter.probes.readiness.failureThreshold | default 3 }}
            timeoutSeconds: {{ .Values.webadapter.probes.readiness.timeoutSeconds | default 5 }}
          volumeMounts:
          {{- if .Values.webadapter.customHttpdConfig }}
          - name: httpd-config-volume
            mountPath: /intershop/conf
          {{- end }}
          {{- if .Values.webadapter.customSSLCertificates }}
          - name: ssl-config-volume
            mountPath: /intershop/webserver-certs
          {{- end }}
          - name: pagecache-volume
            mountPath: /intershop/pagecache
          - name: logs-volume
            mountPath: /intershop/logs
          {{- if .Values.persistence.customdata.enabled }}
          - name: custom-data-volume
            mountPath: {{ .Values.persistence.customdata.mountPoint }}
          {{- end }}
          {{- if .Values.webadapter.sslCertificateRetrieval.enabled }}
          - name: secrets-store-inline
            mountPath: /mnt/secrets
          {{- end }}
          ports:
            - name: http
              containerPort: 8080
              protocol: TCP
            # TODO remove SSL support
            - name: https
              containerPort: 8443
              protocol: TCP
          resources:
            {{- toYaml .Values.resources.webadapter | nindent 12 }}
        {{- if (and .Values.agent.enabled (eq .Values.persistence.pagecache.type "emptyDir"))}}
        - name: "{{ .Chart.Name }}-agent"
          {{- include "icm-waa.container" . | nindent 10 }}
        {{- end }}
