test:
  enabled: true

icm-as:
  nodeSelector:
    agentpool: agentpool2
  podAnnotations:
    # as long as there are no long running job pods we need this annotation for icm-as
    "cluster-autoscaler.kubernetes.io/safe-to-evict": "false"
  image:
    repository: "${ICM_TEST_IMAGE}"
  customCommand:
    - "/bin/sh"
    - "-c"
    - |
      # workaround to keep java in the path
      export ROOTPATH=$PATH

      su ${SERVER_DIRECTORY_USER} <<'EOF'
        export PATH=$ROOTPATH
        timestamp=$(date '+%Y-%m-%d_%H_%M_%S')
        sh /intershop/bin/intershop.sh appserver  2>&1 | tee outfile $HELM_DIRECTORY/server-logs/as${timestamp}.log
      EOF
  podSecurityContext:
    runAsUser: 0
  copySitesDir:
   enabled: true
   fromDir: ${WORKSPACE_DIRECTORY}/../../../sites
   resultDir: ${RESULT_DIRECTORY}
   chmodUser: ${SERVER_DIRECTORY_USER}
   chmodGroup: ${SERVER_DIRECTORY_GROUP}
  license:
    type: secret
    secret:
      name: intershop-license
  database:
    type: "${DATABASE_TYPE}"
    jdbcURL: "${DATABASE_CONNECTION_STRING}"
    jdbcUser: "${DATABASE_USER}"
    jdbcPassword: "${DATABASE_USER}"
  environment:
    TZ: Europe/Berlin

    CARTRIDGE_LIST: "ft_e2e_test"

    SERVER_DIRECTORY: "${SERVER_DIRECTORY}"
    HELM_DIRECTORY: "${HELM_DIRECTORY}"
    CONFIG_DIRECTORY: "${CONFIG_DIRECTORY}"
    RESULT_DIRECTORY: "${RESULT_DIRECTORY}"
    WORKSPACE_DIRECTORY: "${WORKSPACE_DIRECTORY}"
    SERVER_DIRECTORY_GROUP: "${SERVER_DIRECTORY_GROUP}"
    SERVER_DIRECTORY_USER: "${SERVER_DIRECTORY_USER}"

    INTERSHOP_SMTPSERVER: "${HELM_JOB_NAME}-icm-mail" # adapt when service for mail is created
    INTERSHOP_WEBSERVERURL: "http://${HELM_JOB_NAME}-icm-web-wa:8080"
    INTERSHOP_WEBSERVERSECUREURL: "https://${HELM_JOB_NAME}-icm-web-wa:8443"

    SMTPMAILSERVICE_DEFAULTSMTPMAILSERVICE_MAIL_SMTP_HOSTNAMES: "${HELM_JOB_NAME}-icm-mail"
    SMTPMAILSERVICE_DEFAULTSMTPMAILSERVICE_MAIL_SMTP_PORT: "25"

    # Disable Mailhog for now (#82978)
    MAIL_SMTP_MAILHOG_ENABLED: "false"

    # so http acceses are still allowed (necessary to make test and environment not to complicated)
    SECUREACCESSONLY: "false"
  persistence:
    sites:
      size: 1Gi
      type: cluster
      cluster:
        storageClass:
          existingClass: azurefile
    customdata:
      enabled: true
      existingClaim: icm-nfs
  datadog:
    enabled: true
    env: eng-iste-testrun
    options: "-Ddd.profiling.enabled=false -Ddd.trace.analytics.enabled=true -Ddd.jdbc.analytics.enabled=true"

icm-web:
  nodeSelector:
    agentpool: agentpool2
  webadapter:
    podAnnotations:
      # as long as there is no new cache system we need this annotation for icm-web
      "cluster-autoscaler.kubernetes.io/safe-to-evict": "false"
    image:
      repository: "${ICM_WEBSERVER_IMAGE}"
      command: |
        mkdir -p $HELM_DIRECTORY/server-logs
        chown -R ${SERVER_DIRECTORY_USER}:${SERVER_DIRECTORY_GROUP} ${HELM_DIRECTORY}/server-logs
        timestamp=$(date '+%Y-%m-%d_%H_%M_%S')
        su ${SERVER_DIRECTORY_USER} -c "/intershop/bin/intershop.sh 2>&1 | tee outfile $HELM_DIRECTORY/server-logs/wa${timestamp}.log"
  agent:
    image:
      repository: "${ICM_WEBADAPTER_AGENT_IMAGE}"
      command: |
        mkdir -p $HELM_DIRECTORY/server-logs
        chown -R ${SERVER_DIRECTORY_USER}:${SERVER_DIRECTORY_GROUP} ${HELM_DIRECTORY}/server-logs
        timestamp=$(date '+%Y-%m-%d_%H_%M_%S')
        su ${SERVER_DIRECTORY_USER} -c "/intershop/bin/start-waa.sh 2>&1 | tee outfile $HELM_DIRECTORY/server-logs/waa${timestamp}.log"
  podSecurityContext:
    runAsUser: 0
    runAsGroup: 0
    fsGroup: 0
  environment:
    HELM_DIRECTORY: "${HELM_DIRECTORY}"
    SERVER_DIRECTORY_USER: "${SERVER_DIRECTORY_USER}"
    SERVER_DIRECTORY_GROUP: "${SERVER_DIRECTORY_GROUP}"
  service:
    httpPort: 8080
    httpsPort: 8443
  persistence:
    pagecache:
      type: emptyDir
    customdata:
      enabled: true
      existingClaim: icm-nfs

mail:
  nodeSelector:
    agentpool: agentpool2
  image:
    repository: ishisteacr.azurecr.io/iste/iste-mail:1.0.0-SNAPSHOT
  environment:
    HELM_DIRECTORY: "${HELM_DIRECTORY}"

testrunner:
  nodeSelector:
    agentpool: agentpool2
  image:
    repository: "${ICM_TEST_IMAGE}"
    command: |
      set -x
      mkdir -p ${HELM_DIRECTORY}/result
      chown -R 150:150 ${HELM_DIRECTORY}/result
      chmod 777 ${HELM_DIRECTORY}/result

      mkdir ${HELM_DIRECTORY}/pagedumps
      chown -R 150:150 ${HELM_DIRECTORY}/pagedumps
      chmod 777 ${HELM_DIRECTORY}/pagedumps

      # be able to zip pagedumps folder
      apt-get -qq update
      apt-get -qq install -y zip

      # workaround to keep java in the path
      export ROOTPATH=$PATH

      # startup
      su ${SERVER_DIRECTORY_USER} <<'EOF'
        set -x
        export PATH=$ROOTPATH
        sh /intershop/bin/testrunner.sh -s=${TESTSUITE} -o=${RESULT_DIRECTORY} 2>&1 | tee -a ${RESULT_DIRECTORY}/istestrunner_log.txt
        PROCESS_ERROR_LEVEL=$?
        TEST_EXECUTION_RESULT_STATUS="failed"
        if [ "${PROCESS_ERROR_LEVEL}" -eq 0 ];
        then
          zip -qr ${RESULT_DIRECTORY}/pagedumps.zip ${HELM_DIRECTORY}/pagedumps
          rm -Rf ${HELM_DIRECTORY}/pagedumps
          TEST_EXECUTION_RESULT_STATUS="success"
        else
          top -b -n 1 > ${RESULT_DIRECTORY}/top.txt
        fi
        echo "result: ${TEST_EXECUTION_RESULT_STATUS}" > ${RESULT_DIRECTORY}/finished.yml
        echo "result-datetime: $(date)" >> ${RESULT_DIRECTORY}/finished.yml
        exit $PROCESS_ERROR_LEVEL
      EOF
  podSecurityContext:
    runAsUser: 0
  environment:
    CARTRIDGE_LIST: "app_bo_test"

    HELM_DIRECTORY: "${HELM_DIRECTORY}"
    RESULT_DIRECTORY: "${RESULT_DIRECTORY}"

    MAIL_SERVER: "${HELM_JOB_NAME}-icm-mail"

    TESTSUITE: "${TESTSUITE}"
    HOST: "${HELM_JOB_NAME}-icm-web-wa"

    APPSERVERNAME: "${HELM_JOB_NAME}-icm-as"
    MAIL_SHARE: "${HELM_DIRECTORY}/test-mails"

    PORT_HTTP: 8080
    PORT_HTTPS: 8443
    SERVLETENGINE_PORT: 7743

    SERVER_DIRECTORY_USER: "${SERVER_DIRECTORY_USER}"

    DEFAULT_PAGEDUMP_DIRECTORY: ${HELM_DIRECTORY}/pagedumps
    REMOVE_SUCCESSFUL_PAGEDUMPS: 'true'

  resources:
    requests:
      cpu: 800m
      memory: 2Gi
    limits:
      cpu: 800m
      memory: 2Gi
  initContainer:
    resources:
      requests:
        cpu: 100m
        memory: 250Mi
      limits:
        cpu: 100m
        memory: 250Mi
  replicaCount: 1
  persistence:
    testdata:
      size: 1Gi
      type: existingClaim
      existingClaim: icm-nfs
  datadog:
    enabled: true
    env: eng-iste-testrun
    options: "-Ddd.profiling.enabled=false -Ddd.trace.analytics.enabled=true -Ddd.jdbc.analytics.enabled=true"
  ## Control options regarding the java-vm running the ICM-AS
  jvm:
    # define options / parameters to be used to start the jvm
    options:
    # define additional options / parameters to be used to start the jvm (will be appended to options)
    additionalOptions:
