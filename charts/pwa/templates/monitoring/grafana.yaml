{{- if (.Values.monitoring).enabled -}}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "pwa-grafana.fullname" . }}
  labels:
    app.kubernetes.io/name: {{ include "pwa-grafana.name" . }}
    helm.sh/chart: {{ include "pwa-main.chart" . }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
spec:
  strategy:
    type: "Recreate"
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: {{ include "pwa-grafana.name" . }}
      app.kubernetes.io/instance: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app.kubernetes.io/name: {{ include "pwa-grafana.name" . }}
        app.kubernetes.io/instance: {{ .Release.Name }}
    spec:
      containers:
        - env:
            - name: GF_SECURITY_ADMIN_PASSWORD
              value: {{ (.Values.monitoring.grafana).password | default "intershop" }}
            - name: GF_USERS_ALLOW_SIGN_UP
              value: "false"
          image: grafana/grafana:latest
          name: {{ .Chart.Name }}
          ports:
            - containerPort: 3000
              hostPort: 3000
              protocol: TCP
          volumeMounts:
            - name: {{ include "pwa-grafana.config" . }}
              mountPath: /etc/grafana/provisioning/datasources/datasource.yml
              subPath: datasource.yml
            - name: {{ include "pwa-grafana.config" . }}
              mountPath: /etc/grafana/provisioning/dashboards/dashboards.yml
              subPath: dashboards.yml
            - name: {{ include "pwa-grafana.config" . }}
              mountPath: /etc/grafana/provisioning/dashboards/pwa-dashboard.json
              subPath: pwa-dashboard.json
            - name: {{ include "pwa-grafana.data" . }}
              mountPath: /var/lib/grafana
      restartPolicy: Always
      volumes:
        - name: {{ include "pwa-grafana.config" . }}
          configMap:
            name: {{ include "pwa-grafana.config" . }}
            items:
              - key: datasource.yml
                path: datasource.yml
              - key: dashboards.yml
                path: dashboards.yml
              - key: pwa-dashboard.json
                path: pwa-dashboard.json
        - name: {{ include "pwa-grafana.data" . }}
          persistentVolumeClaim:
            claimName: {{ include "pwa-grafana.data" . }}

---
apiVersion: v1
kind: Service
metadata:
  name: {{ include "pwa-grafana.fullname" . }}
  labels:
    app.kubernetes.io/name: {{ include "pwa-grafana.name" . }}
    helm.sh/chart: {{ include "pwa-main.chart" . }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
spec:
  ports:
    - name: grafana
      port: 3000
      targetPort: 3000
  selector:
    app.kubernetes.io/name: {{ include "pwa-grafana.name" . }}
    app.kubernetes.io/instance: {{ .Release.Name }}

---
{{ if ((.Values.monitoring).grafana).host }}
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: {{ include "pwa-grafana.fullname" . }}
  labels:
    app.kubernetes.io/name: {{ include "pwa-grafana.name" . }}
    helm.sh/chart: {{ include "pwa-main.chart" . }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
  {{- with ((.Values.monitoring).grafana).annotations }}
  annotations:
    {{- toYaml . | nindent 4 }}
  {{- end }}
spec:
  ingressClassName: {{ .Values.ingress.className }}
  rules:
    - host: {{ .Values.monitoring.grafana.host }}
      http:
        paths:
          - backend:
              service:
                name: {{ include "pwa-grafana.fullname" . }}
                port:
                  number: 3000
            path: /
            pathType: Prefix
{{ end }}

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: {{ include "pwa-grafana.data" . }}
  labels:
    app.kubernetes.io/name: {{ include "pwa-grafana.name" . }}
    app.kubernetes.io/instance: {{ .Release.Name }}
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "pwa-grafana.config" . }}
  labels:
    app.kubernetes.io/name: {{ include "pwa-grafana.name" . }}
    app.kubernetes.io/instance: {{ .Release.Name }}
data:
  datasource.yml: |
    apiVersion: 1
    deleteDatasources:
      - name: Prometheus
        orgId: 1
    datasources:
    - name: Prometheus
      type: prometheus
      orgId: 1
      url: http://{{ include  "pwa-prometheus.fullname" . }}:9090
      basicAuth: false
      isDefault: true
      version: 1
      editable: false
  dashboards.yml: |
    apiVersion: 1
    providers:
    - name: 'Prometheus'
      orgId: 1
      folder: ''
      type: file
      disableDeletion: false
      editable: true
      options:
        path: /etc/grafana/provisioning/dashboards
binaryData:
  pwa-dashboard.json: |
    
{{- end -}}
